{"version":3,"sources":["conversion/index.js","App.js","index.js"],"names":["baseOptions","binary","possibleCharacter","base","octagonal","decimal","hexadecimal","decimalToBase","numberDecimal","baseName","array","map","value","correctCharacters","baseResult","rest","Math","floor","push","convertToBase","reverse","reduce","accumulator","App","useState","result","setResult","fromBase","setFromBase","toBase","setToBase","userInput","setUserInput","width","height","className","d","defaultValue","onChange","event","target","rows","onKeyPress","validateNumberToConvert","key","preventDefault","type","onClick","numberConverted","characters","index","expoent","length","indexOf","pow","conversionToDecimal","split","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72031406.chunk.js","sourcesContent":["\r\nconst baseOptions = {\r\n    binary: {\r\n        possibleCharacter: [ '0', '1' ],\r\n        base: 2\r\n    },\r\n    octagonal: {\r\n        possibleCharacter: [ '0', '1', '2', '3', '4', '5', '6', '7', ],\r\n        base: 8\r\n    },\r\n    decimal: {\r\n        possibleCharacter: [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' ],\r\n        base: 10\r\n    },\r\n    hexadecimal: {\r\n        possibleCharacter: [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' ],\r\n        base: 16\r\n    }\r\n}\r\n\r\nexport function stringToArray ( text ) {\r\n    return text.split( '' )\r\n}\r\n\r\nexport function conversionToDecimal ( characters, baseName ) {\r\n    const { base, possibleCharacter } = baseOptions[baseName]\r\n\r\n    return characters.reduce( ( accumulator, value, index ) => {\r\n        const expoent = characters.length - 1 - index;\r\n        const correct = possibleCharacter.indexOf( value )\r\n        const potency = correct * Math.pow( base, expoent )\r\n        return accumulator + potency\r\n    }, 0 )  \r\n}\r\n\r\nexport function decimalToBase ( numberDecimal, baseName ) {\r\n    const baseResult = convertToBase( numberDecimal, baseName )\r\n    const correct = correctCharacters( baseResult, baseName )\r\n    const reverse = correct.reverse()\r\n\r\n    return reverse.reduce( ( accumulator, value ) => accumulator + value, '' )\r\n}\r\n\r\nfunction convertToBase( numberDecimal, baseName ) {\r\n    const { base } = baseOptions[baseName]\r\n    \r\n    const baseResult = []\r\n    while( true ) {\r\n        const rest = numberDecimal % base\r\n        numberDecimal = Math.floor( numberDecimal / base )\r\n\r\n        baseResult.push( rest )\r\n\r\n        if ( numberDecimal < base ) { \r\n            baseResult.push( numberDecimal )\r\n            break \r\n        }\r\n    }\r\n\r\n    return baseResult\r\n}\r\n\r\nfunction correctCharacters ( array, baseName ) {\r\n    const { possibleCharacter } = baseOptions[baseName]\r\n    return array.map( value => possibleCharacter[value] )\r\n}\r\n\r\n/* \r\n *  Validate user input \r\n */\r\n\r\nexport function validateNumberToConvert ( userInput, baseName ) {\r\n    const { possibleCharacter } = baseOptions[ baseName ]\r\n  \r\n    return  possibleCharacter.reduce( ( accumulator, value ) => {\r\n        if ( accumulator ) return accumulator\r\n        return value === userInput\r\n    }, false )\r\n}\r\n","import React, { useState } from 'react';\nimport { stringToArray, conversionToDecimal, decimalToBase, validateNumberToConvert } from './conversion'\n\nimport './global.css'\n\nfunction App() {\n  const [ result, setResult ] = useState('Initialize')\n  const [ fromBase, setFromBase ] = useState('binary')\n  const [ toBase, setToBase ] = useState( 'decimal' )\n  const [ userInput, setUserInput ] = useState('')\n\n  function handleValidateUserInput ( event ) {\n    const isPermitted = validateNumberToConvert( event.key, fromBase )\n    if ( !isPermitted )\n      event.preventDefault()\n  }\n\n  function handleConversion () {\n    const inputCharacters = stringToArray( userInput )\n    const decimal = conversionToDecimal( inputCharacters, fromBase )\n    const numberConverted = decimalToBase( decimal, toBase )\n\n    setResult( numberConverted )\n  }\n\n  return (\n    <>\n      <svg width=\"1600\" height=\"450\" className='background-curve' >\n        <path d=\"M 0 0 L 1600 0 L 1600 450 Q 1270 140 820 280 Q 410 450 0 290 Z\" />\n      </svg>\n\n      <h1 className='title'>Conversão de bases</h1>\n      <section className='container' >\n        <form>\n\n          <section className='row'>\n            <select \n              defaultValue={fromBase}\n              onChange={ event => setFromBase( event.target.value ) } \n            >\n              <option value='binary' >Binário</option>\n              <option value='octagonal' >Octagonal</option>\n              <option value='decimal' >Decimal</option>\n              <option value='hexadecimal' >Hexadecimal</option>\n              <option value='ascii'>ASCII</option>\n            </select>\n\n            <span>PARA</span>\n\n            <select \n              defaultValue={toBase}\n              onChange={ event => setToBase( event.target.value ) } \n            >\n              <option value='binary' >Binário</option>\n              <option value='octagonal' >Octagonal</option>\n              <option value='decimal' >Decimal</option>\n              <option value='hexadecimal' >Hexadecimal</option>\n              <option value='ascii'>ASCII</option>\n            </select>\n          </section> \n\n          <textarea \n            rows={5}\n            value={userInput}\n            onChange={ event => setUserInput( event.target.value ) } \n            onKeyPress={ handleValidateUserInput }\n          ></textarea>\n          \n          <p className='result' >{result}</p>\n          \n          <input \n            type='button' \n            value='convert' \n            onClick={handleConversion} \n          />  \n        </form>\n      </section>\n    </>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport App from './App';\n\nReactDOM.render( <App />, document.getElementById('root') );\n"],"sourceRoot":""}